/*
 –ü–æ–ª–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ –∑–∞–¥–∞–Ω –º–∞—Ç—Ä–∏—Ü–µ–π —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
 –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π –º–µ–∂–¥—É –µ–≥–æ –≤–µ—Ä—à–∏–Ω–∞–º–∏.
 –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤ –≥—Ä–∞—Ñ–µ –Ω–µ—Ç —Ü–∏–∫–ª–æ–≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞.

 –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
 –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∏—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ N (1 < N < 100) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –≥—Ä–∞—Ñ–∞.
 –í —Å–ª–µ–¥—É—é—â–∏—Ö N —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ N —á–∏—Å–µ–ª –∑–∞–¥–∞–µ—Ç—Å—è –º–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞
 (j-–æ–µ —á–∏—Å–ª–æ –≤ i-–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî –≤–µ—Å —Ä–µ–±—Ä–∞ –∏–∑ –≤–µ—Ä—à–∏–Ω—ã i –≤ –≤–µ—Ä—à–∏–Ω—É j).
 –í—Å–µ —á–∏—Å–ª–∞ –ø–æ –º–æ–¥—É–ª—é –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç 100. –ù–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –º–∞—Ç—Ä–∏—Ü—ã ‚Äî –≤—Å–µ–≥–¥–∞ –Ω—É–ª–∏.
 –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 –í—ã–≤–µ–¥–∏—Ç–µ ùëÅ —Å—Ç—Ä–æ–∫ –ø–æ ùëÅ —á–∏—Å–µ–ª ‚Äî –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω, –≥–¥–µ ùëó-–æ–µ —á–∏—Å–ª–æ –≤ ùëñ-–æ–π —Å—Ç—Ä–æ–∫–µ —Ä–∞–≤–Ω–æ –≤–µ—Å—É –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –∏–∑ –≤–µ—Ä—à–∏–Ω—ã ùëñ –≤ j.
*/

#include <iostream>
#include <vector>
#define MAX_INT 2147483648

struct IGraph {
    virtual ~IGraph() = default;

    virtual void AddEdge(const std::size_t from, const std::size_t to, const int cost) = 0;

    virtual std::size_t VerticesCount() const = 0;
    virtual int GetCost(const std::size_t from, const std::size_t to) const = 0;

    virtual void GetNextVertices(const std::size_t vertex, std::vector<std::pair<std::size_t, int>> &vertices) const = 0;
    virtual void GetPrevVertices(const std::size_t vertex, std::vector<std::pair<std::size_t, int>> &vertices) const = 0;
};

class MatrixGraph : public IGraph {
public:
    explicit MatrixGraph(const std::size_t VerticesCount) {
        _matrix.resize(VerticesCount);
        for (std::size_t i = 0; i < VerticesCount; ++i) {
            _matrix[i].resize(VerticesCount, MAX_INT);
        }
    }
    explicit MatrixGraph(const IGraph *graph) {
        _matrix.resize(graph->VerticesCount());
        for (std::size_t i = 0; i < _matrix.size(); ++i) {
            _matrix[i].resize(_matrix.size(), MAX_INT);
        }

        std::vector<std::pair<std::size_t, int>> next_vertices;
        for (std::size_t i = 0; i < _matrix.size(); ++i) {
            graph->GetNextVertices(i, next_vertices);
            for (std::size_t j = 0; j < next_vertices.size(); ++j) {
                _matrix[i][next_vertices[j].first] = next_vertices[j].second;
            }
        }
    }

    void AddEdge(const std::size_t from, const std::size_t to, const int cost) override {
        _matrix[from][to] = cost;
    }

    std::size_t VerticesCount() const override {
        return _matrix.size();
    }

    int GetCost(const std::size_t from, const std::size_t to) const {
        return _matrix[from][to];
    }

    void GetNextVertices(const std::size_t vertex,
            std::vector<std::pair<std::size_t, int>> &vertices) const override {
        vertices.clear();

        for (int i = 0; i < _matrix[vertex].size(); ++i) {
            if(_matrix[vertex][i] != MAX_INT) {
                std::pair<std::size_t, int> tmp(i, _matrix[vertex][i]);
                vertices.push_back(tmp);
            }
        }
    }
    void GetPrevVertices(const std::size_t vertex,
            std::vector<std::pair<std::size_t, int>>& vertices) const override{
        vertices.clear();

        for (int i = 0; i < _matrix[vertex].size(); ++i) {
            if(_matrix[i][vertex] != MAX_INT) {
                std::pair<std::size_t, int> tmp(i, _matrix[i][vertex]);
                vertices.push_back(tmp);
            }
        }
    }

private:
    std::vector<std::vector<int>> _matrix;
};

void FindMinPaths(const IGraph *graph, std::vector<std::vector<int>> &distances) {
    // Initializing.
    for (std::size_t i = 0; i < graph->VerticesCount(); ++i) {
        for (std::size_t j = 0; j < graph->VerticesCount(); ++j) {
            distances[i][j] = graph->GetCost(i, j);
        }
    }

    // Floid algorithm.
    for (std::size_t k = 0; k < graph->VerticesCount(); ++k) {
        for (std::size_t i = 0; i < graph->VerticesCount(); ++i) {
            for (std::size_t j = 0; j < graph->VerticesCount(); ++j) {
                if (distances[i][k] < MAX_INT && distances[k][j] < MAX_INT)
                    distances[i][j] = std::min(distances[i][j], distances[i][k] + distances[k][j]);
            }
        }
    }
}

int main() {
    std::size_t n = 0;
    std::cin >> n;

    MatrixGraph graph(n);
    for (std::size_t i = 0; i < n; ++i) {
        for (std::size_t j = 0; j < n; ++j) {
            int cost = 0;
            std::cin >> cost;
            graph.AddEdge(i, j, cost);
        }
    }

    std::vector<std::vector<int>> distances(n, std::vector<int>(n));
    FindMinPaths(&graph, distances);

    for (std::size_t i = 0; i < n; ++i) {
        for (std::size_t j = 0; j < n; ++j) {
            std::cout << distances[i][j] << ' ';
        }
        std::cout << std::endl;
    }

    return 0;
}

/*
IN
4
0 5 9 100
100 0 2 8
100 100 0 7
4 100 100 0
OUT
0 5 7 13
12 0 2 8
11 16 0 7
4 9 11 0
*/